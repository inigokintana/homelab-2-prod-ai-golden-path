# -*- mode: Python -*

#k8s_yaml('k8s/kubernetes.yaml')
# Deploy the Kubernetes resources defined in the k8s/ovelays/dev files
#  k config current-context  -> microk8s
k8s_yaml("k8s/overlays/dev/output_dev.yaml", allow_duplicates=True)
k8s_resource('dapr-sdk-docs-scraper', port_forwards='8000:3500',
             resource_deps=['deploy'])

# Records the current time, then kicks off a server update.
# Normally, you would let Tilt do deploys automatically, but this
# shows you how to set up a custom workflow that measures it.
local_resource(
    'deploy',
    #'python3 now.py > start-time.txt',
    'python3 -c "import time; print(int(time.time() * 1e9))" > start-time.txt', 
    # cmd='bash -c "python3 -c \'import time; print(\\\"%d\\\" % (float(time.time()) * 1000 * 1000 * 1000))\' > start-time.txt"',
)

# Add a live_update rule to our docker_build
congrats = "ðŸŽ‰ Congrats, you ran a live_update! ðŸŽ‰"
# docker build and image into microk8s registry
docker_build('localhost:32000/my-scraper-image-dapr', '.', build_args={'ENABLE_DEBUG': 'True'},
    live_update=[
        sync('.', '/app'),
        run('cd /app && pip install -r requirements.txt',
            trigger='./requirements.txt'),

        # if all that changed was start-time.txt, make sure the server
        # reloads so that it will reflect the new startup time
        run('touch /app/load-into-db.py', trigger='./start-time.txt'),

        # add a congrats message!
        #run('sed -i "s/Hello cats!/{}/g" /app/templates/index.html'.
        #    format(congrats)),
])